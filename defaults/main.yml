# Version to install or latest
kube_version: 1.19.14
# Type of node front, control_plane or wn
kube_type_of_node: front
# IP address or name of the Kube front node
kube_server: "{{ ansible_default_ipv4.address }}"
# Token
kube_token: "kube01.{{ lookup('password', '/var/tmp/tokenpass chars=ascii_lowercase,digits length=16') }}"
# Token TTL duration (0 do not expire)
kube_token_ttl: 0
# POD network cidr
kube_pod_network_cidr: 10.244.0.0/16
# Type of network to install: currently supported: flannel, kube-router, calico, weave
kube_network: flannel
# Kubelet extra args
kubelet_extra_args: ''
# Kube API server options
kube_apiserver_options: []
# CRI runtime
kube_cri_runtime: docker # docker or containerd
# Flag to set HELM to be installed
kube_install_helm: true
# Helm version
kube_install_helm_version: "v3.2.1"
# Deploy the Dashboard
kube_deploy_dashboard: false
# Value to pass to the kubeadm init --apiserver-advertise-address option
kube_api_server: 0.0.0.0
# IP to wait the api server
kube_wait_api_server_ip: 127.0.0.1
# List of values with the information for creating persisten volumes
# Array variables needed: [ namespace : "", name : "", label : "", capacity_storage : "", nfs_path : "" ]
kube_persistent_volumes: []
# A set of git repos and paths to be applied in the cluster. Following this format:
# kube_apply_repos: [{repo: "https://github.com/kubernetes-incubator/metrics-server", version: "master", path: "deploy/1.8+/"}]
kube_apply_repos: []
# Flag to set Metrics-Server to be installed
kube_install_metrics: false
# Flag to set the nginx ingress controller to be installed
kube_install_ingress: false
# Flag to set add the nvidia support to the cluster
kube_nvidia_support: false
# Driver version to install: specific version or "latest"
kube_nvidia_driver_version: "410"
# Flag to set the kubeapps UI to be installed
kube_install_kubeapps: false
# KubeApps chart version to install (or latest)
kube_kubeapps_chart_version: "7.3.2"
# Flag to set nfs-client-provisioner to be installed
kube_install_nfs_client: false
# NFS path used by nfs-client-provisioner
kube_nfs_path: /pv
# NFS server used by nfs-client-provisioner
kube_nfs_server: kubeserver.localdomain
# Extra options for the flannel plugin
kube_flanneld_extra_args: []
# Enable to install and manage Certificates with Cert-manager
kube_cert_manager: false
# Public IP to use by the cert-manager (not needed if kube_public_dns_name is set)
kube_cert_public_ip: "{{ ansible_default_ipv4.address }}"
# Public DNS name to use in the dashboard tls certificate
kube_public_dns_name: ""
# Email to be used in the Let's Encrypt issuer
kube_cert_user_email: jhondoe@server.com
# Cert Manager type of challenge provider: http01 or dns01
kube_cert_manager_challenge: 'http01'
# In case of dns01 only Route53 is supported and this data is required
kube_cert_manager_challenge_dns01_domain: ''
kube_cert_manager_challenge_dns01_ak: ''
kube_cert_manager_challenge_dns01_sk: ''
# Options to add in the docker.json file
kube_docker_options: {}
# Compatible docker versions
kube_docker_compatible_versions: ['17.03.', '18.06.', '18.09.', '19.03.']
# Nvidia docker options to add in the docker.json file
docker_nvidia_options:
  default-runtime: nvidia
  runtimes:
    nvidia:
      path: /usr/bin/nvidia-container-runtime
      runtimeArgs: []
# Install docker with pip
kube_install_docker_pip: false

# Endpoint for the control plane in case of HA mode with multiple master
kube_control_plane_ip: ""
kube_control_plane_port: 8443
kube_control_plane_peer_ip: ""
kube_control_plane_peer_iface: ""
kube_control_plane_remote_peer_list: ["{{ ansible_default_ipv4.address }}"]
# ETCD Peer adress
kube_etcd_peer_address: "{{ ansible_default_ipv4.address }}"
kube_etcd_peer_list: {"kubeserver.localdomain": "{{ ansible_default_ipv4.address }}"}
kube_etcd_peer_name: "kubeserver.localdomain"
