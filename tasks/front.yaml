---
- name: Copy 'is_cluster_ready' file
  copy: dest=/bin/is_cluster_ready src=is_cluster_ready mode=0755

- set_fact: kube_pod_network_cidr='192.168.0.0/16'
  when: kube_network == 'calico'

- name: force handlers
  meta: flush_handlers

- name: Kubeadm init
  command: kubeadm init --pod-network-cidr={{kube_pod_network_cidr}} --token={{kube_token}} --token-ttl {{kube_token_ttl}} --apiserver-advertise-address={{kube_api_server}} creates=/etc/kubernetes/admin.conf

- name: Set kube_wait_api_server_ip
  set_fact:
    kube_wait_api_server_ip: "{{kube_api_server}}"
  when: kube_api_server != "0.0.0.0"

- name: wait Kube to start on "{{kube_wait_api_server_ip}}"
  wait_for: port=6443 host="{{kube_wait_api_server_ip}}"

- import_tasks: kube_nets.yaml

- import_tasks: helm.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_helm | bool

- include_tasks: cert-manager.yaml

- block:
    - copy: src=kubernetes-dashboard.yaml dest=/tmp/kubernetes-dashboard.yaml
    - command: kubectl apply -f /tmp/kubernetes-dashboard.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_deploy_dashboard | bool

- block:
    - copy: src=metrics-server.yaml dest=/tmp/metrics-server.yaml
    - command: kubectl apply -f /tmp/metrics-server.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_metrics | bool

- name: Add persistent volumes to kube cluster  
  block:
    - template: src=persistent-volumes.j2 dest=/tmp/kubernetes-persistent-volumes.yml
    - command: kubectl apply -f /tmp/kubernetes-persistent-volumes.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_persistent_volumes != []

- name: Install Git package
  package: name=git
  when: kube_apply_repos != []

- name: Download git repo "{{ item.repo }}"
  git:
    repo: "{{ item.repo }}"
    dest: "/tmp/{{ item.repo | basename }}"
    version: "{{ item.version }}"
  with_items: "{{ kube_apply_repos }}"

- name: apply path "{{ item.path }}"
  command: kubectl apply -f "{{ item.path }}" chdir="/tmp/{{ item.repo | basename }}"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  with_items: "{{ kube_apply_repos }}"

- name: Add Kube API server options
  lineinfile:
    dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    line: '    - {{item.option}}={{item.value}}'
    regexp: '^    - {{item.option}}='
    insertafter: '    - kube-apiserver'
  notify: restart kubeapi
  with_items: "{{ kube_apiserver_options }}"

- name: Set KUBECONFIG environment variable
  lineinfile:
    dest: /etc/environment
    line: "KUBECONFIG=/etc/kubernetes/admin.conf"

- name: force handlers
  meta: flush_handlers

- import_tasks: ingress.yaml
  when: kube_install_ingress | bool

- block:
    - copy: src=nvidia-device-plugin.yml dest=/tmp/nvidia-device-plugin.yml
    - command: kubectl apply -f /tmp/nvidia-device-plugin.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_nvidia_support | bool

- block:
    - template: src=kubernetes-dashboard-ingress.j2 dest=/tmp/kubernetes-dashboard-ingress.yaml
    - command: kubectl apply -f /tmp/kubernetes-dashboard-ingress.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_ingress | bool and kube_deploy_dashboard | bool

- import_tasks: kubeapps.yaml
  when: kube_install_kubeapps | bool

- block:
    - copy: src=nfs-client.yaml dest=/tmp/nfs-client.yaml
    - command: kubectl apply -f /tmp/nfs-client.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_nfs_client | bool
