---
- name: Copy 'is_cluster_ready' file
  copy: dest=/bin/is_cluster_ready src=is_cluster_ready mode=0755

- block:

  - set_fact:
      init_params: ""

  - name: Configure VIP LB
    import_tasks: lb.yaml
    when: kube_control_plane_ip != ""

  - name: Create kubeadm-config file
    template: src=kubeadm-config.j2 dest=/tmp/kubeadm-config.yml

  - name: Kubeadm init
    command: kubeadm init --upload-certs --config /tmp/kubeadm-config.yml {{init_params}} creates=/etc/kubernetes/admin.conf 
    register: kubeadm_init

  - name: Get certificate-key
    set_fact:
      kubeadm_certificate_key: "{{ kubeadm_init.stdout | regex_search('(?<=certificate-key: )[a-z0-9]{64}') }}"

  - name: Save certificate-key
    copy:
      dest: /var/tmp/kubeadm-certificate-key
      content: "{{ kubeadm_certificate_key }}"
      mode: '0644'

  - name: Set kube_wait_api_server_ip
    set_fact:
      kube_wait_api_server_ip: "{{kube_api_server}}"
    when: kube_api_server != "0.0.0.0"

  - set_fact:
      node_port_exists: false

  - set_fact:
      node_port_exists: true
    when: " '{{item.option}}' == '--service-node-port-range'"
    loop: "{{ kube_apiserver_options }}"

  - name: Add Kube API server --service-node-port-range option
    set_fact:
      kube_apiserver_options: "{{ [{'option': '--service-node-port-range', 'value': '80-35000'}] + kube_apiserver_options }}"
    when: kube_install_ingress | bool and not node_port_exists | bool

  - name: Add Kube API server options
    lineinfile:
      dest: /etc/kubernetes/manifests/kube-apiserver.yaml
      line: '    - {{item.option}}={{item.value}}'
      regexp: '^    - {{item.option}}='
      insertafter: '    - kube-apiserver'
    register: add_kube_api_server_options
    with_items: "{{ kube_apiserver_options }}"

  - name: Restart Kube API server
    block:

    - name: kill kubeapi
      command: killall kube-apiserver
      ignore_errors: true

    - name: restart kubelet to restart kubeapi
      service:
        name: kubelet
        state: restarted

    - name: Pause for 5 seconds to wait kubelet to restart
      pause:
        seconds: 5

    when: add_kube_api_server_options is changed

  - name: wait Kube to start on "{{kube_wait_api_server_ip}}"
    uri:
      url: "https://{{kube_wait_api_server_ip}}:6443/livez"
      status_code: 200
      validate_certs: false
    register: result
    until: result.status == 200
    retries: 30
    delay: 2

  - set_fact:
      KUBECONFIG: /etc/kubernetes/admin.conf
  
  - import_tasks: kube_nets.yaml
    environment:
      KUBECONFIG: "{{KUBECONFIG}}"

  when: kube_install_method == "kubeadm"


- block:

  - set_fact:
      k3s_args: "--disable traefik --disable servicelb --disable local-storage {{kube_k3_exec}}"

  - name: Add Kube API server options to K3s
    set_fact:
      k3s_args: "{{k3s_args}} --kube-apiserver-arg={{item.option}}={{item.value}}"
    with_items: "{{ kube_apiserver_options }}"

  - set_fact:
      k3s_args: "{{k3s_args}} --service-node-port-range=80-32000"
    when: kube_install_ingress | bool

  - name: Install k3s server
    command: sh /tmp/k3s.sh {{k3s_args}} creates=/etc/rancher/k3s/k3s.yaml
    environment:
      INSTALL_K3S_VERSION: "{{ kube_version }}"

  - name: Link kubectl to /usr/bin/kubectl
    file:
      src: /usr/local/bin/kubectl
      dest: /usr/bin/kubectl
      state: link

  - name: Update master node label
    shell: kubectl get node --selector='node-role.kubernetes.io/master' -o=name | xargs -I ARG kubectl label ARG node-role.kubernetes.io/master= --overwrite

  - set_fact:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml

  when: kube_install_method == "k3s"

- name: Set KUBECONFIG environment variable
  lineinfile:
    dest: /etc/environment
    line: "KUBECONFIG={{KUBECONFIG}}"

- import_tasks: helm.yaml
  environment:
    KUBECONFIG: "{{KUBECONFIG}}"

- include_tasks: cert-manager.yaml

- block:
    - name: Create kubernetes-dashboard.yaml
      copy: src=kubernetes-dashboard.yaml dest=/tmp/kubernetes-dashboard.yaml
    - name: Apply kubernetes-dashboard.yaml
      command: kubectl apply -f /tmp/kubernetes-dashboard.yaml
      environment:
        KUBECONFIG: "{{KUBECONFIG}}"
  when: kube_deploy_dashboard | bool

- name: Install metrics-server helm chart
  import_tasks: helm_chart.yaml
  vars:
    helm_chart_name: metrics-server
    helm_chart_namespace: kube-system
    helm_repo_name: metrics-server
    helm_repo_url: https://kubernetes-sigs.github.io/metrics-server
    helm_chart_version: "{{ kube_metrics_chart_version }}"
    helm_wait: false
  when: kube_install_metrics | bool

- name: Add persistent volumes to kube cluster  
  block:
    - template: src=persistent-volumes.j2 dest=/tmp/kubernetes-persistent-volumes.yml
    - command: kubectl apply -f /tmp/kubernetes-persistent-volumes.yml
      environment:
        KUBECONFIG: "{{KUBECONFIG}}"
  when: kube_persistent_volumes != []

- name: Install Git package
  package: name=git
  when: kube_apply_repos != []

- name: Download git repo "{{ item.repo }}"
  git:
    repo: "{{ item.repo }}"
    dest: "/tmp/{{ item.repo | basename }}"
    version: "{{ item.version }}"
  with_items: "{{ kube_apply_repos }}"

- name: apply path "{{ item.path }}"
  command: kubectl apply -f "{{ item.path }}" chdir="/tmp/{{ item.repo | basename }}"
  environment:
    KUBECONFIG: "{{KUBECONFIG}}"
  with_items: "{{ kube_apply_repos }}"

- import_tasks: nfs-client.yaml
  when: kube_install_nfs_client | bool and not kube_install_longhorn | bool

- block:
    - name: Create longhorn.yaml
      template: src=longhorn.j2 dest=/tmp/longhorn.yaml
    - name: Apply longhorn.yaml
      command: kubectl apply -f /tmp/longhorn.yaml
      environment:
        KUBECONFIG: "{{KUBECONFIG}}"
  when: kube_install_longhorn | bool

- import_tasks: ingress.yaml
  when: kube_install_ingress | bool

- block:
    - name: Create nvidia-device-plugin.yaml
      template: src=nvidia-device-plugin.j2 dest=/tmp/nvidia-device-plugin.yml
    - name: Apply nvidia-device-plugin.yaml
      command: kubectl apply -f /tmp/nvidia-device-plugin.yml
      environment:
        KUBECONFIG: "{{KUBECONFIG}}"
  when: kube_nvidia_support | bool

- block:
    - name: Create kubernetes-dashboard-ingress.yaml
      template: src=kubernetes-dashboard-ingress.j2 dest=/tmp/kubernetes-dashboard-ingress.yaml
    - name: Apply kubernetes-dashboard-ingress.yaml
      command: kubectl apply -f /tmp/kubernetes-dashboard-ingress.yaml
      environment:
        KUBECONFIG: "{{KUBECONFIG}}"
  when: kube_install_ingress | bool and kube_deploy_dashboard | bool

- import_tasks: kubeapps.yaml
  when: kube_install_kubeapps | bool

- import_tasks: kyverno.yaml
  when: kube_install_kyverno | bool

- import_tasks: yunikorn.yaml
  when: kube_install_yunikorn | bool

- import_tasks: delete_wns.yaml