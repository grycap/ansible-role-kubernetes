---
- name: Add repo for new Kubernetes versions
  block:
  when: "kube_version is version('1.24', '>=')"

  - name: Set kube_minor_version
    set_fact:
      kube_minor_version: "{{ kube_version.split('.')[0] }}"."{{ kube_version.split('.')[1] }}"

  - name: Add repo key
    get_url:
      url: "https://pkgs.k8s.io/core:/stable:/v1.{{ kube_minor_version }}/deb/Release.key"
      dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
      mode: '0644'

  - name: Add kubernetes repo
    apt_repository: repo='deb https://pkgs.k8s.io/core:/stable:/v{{ kube_minor_version }}/deb/ /' state=present update_cache=yes


- name: Add repo for old Kubernetes versions
  block:
  when: "kube_version is version('1.24', '<')"

  - name: Add repo key
    get_url:
      url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
      dest: /etc/apt/trusted.gpg.d/google.gpg
      mode: '0644'
      force: true
    register: add_key
    ignore_errors: yes

  - name: Add repo key copy with asc extension to workarond issues
    copy:
      src: /etc/apt/trusted.gpg.d/google.gpg
      dest: /etc/apt/trusted.gpg.d/google.asc
      mode: '0644'
      remote_src: yes
    when: add_key is changed

  - name: Add kubernetes repo
    apt_repository: repo='deb http://apt.kubernetes.io/ kubernetes-xenial main' state=present update_cache=yes

- name: Install kubernetes packages
  apt: name=kubelet={{ kube_version }}*,kubeadm={{ kube_version }}*,kubectl={{ kube_version }}*
  when: kube_version != "latest" and (kubeadm_output.stdout == '' or kubeadm_output.stdout is version(kube_version, '<='))

- name: Install kubernetes packages
  apt: name=kubelet,kubeadm,kubectl state=latest
  when: kube_version == "latest"

- name: Hold "{{ item }}" package
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubeadm
    - kubelet
    - kubectl
  ignore_errors: yes
